#!/usr/bin/env bash

cat<<EOF

Name:
  rm

------------------------------------------------------------------------------

Description:
  The rm command removes (deletes) files or directories.

------------------------------------------------------------------------------

Syntax:
  rm [options]... file...

------------------------------------------------------------------------------

Options:
  -f, --force
      ignore nonexistent files, never prompt
  -i
      Prompt before every removal
  -I
      Prompt once before removing more than three files, or when removing
      recursively. Less intrusive than -i, while still giving protection against
      most mistakes
  --interactive[=WHEN]
      Prompt according to WHEN: never, once (-I), or always (-i). Without WHEN,
      prompt always
  --one-file-system
      When removing a hierarchy recursively, skip any directory that is on
      a file system different from that of the corresponding command line
      argument
  --no-preserve-root
      Do not treat '/' specially
  --preserve-root
      Do not remove '/' (default)
  -r, -R, --recursive
      Remove directories and their contents recursively
  -v, --verbose
      Explain what is being done
  --help
      Display this help and exit
  --version
      Output version information and exit

------------------------------------------------------------------------------

Removing Directories
  By default, rm does not remove directories. If the -r (--recursive) option is
  specified, however, rm will remove any matching directories and their
  contents.

------------------------------------------------------------------------------

Filenames Starting With A Dash
  To remove a file whose name begins with a dash ("-"), you can specify a double
  dash ("--") separately before the filename. This is necessary so that rm does
  not misinterpret the filename as an option.

  For instance, if there is a file in your current directory named "-file.txt",
  you can delete it with the command

  $ rm -- -file.txt

  Or, you can delete it by referring to it with a pathname. For instance, if the
  file "-file.txt" was located in the directory "/home/chope", you could delete
  it using:

  $ rm /home/chope/-file.txt

  ...or, if /home/chope is your current directory,

  $ rm ./-file.txt

  ...will work as well.

------------------------------------------------------------------------------

Examples:
  Remove the file myfile.txt. If the file is write-protected, you will be
  prompted to confirm that you really want to delete it.

    $ rm myfile.txt

  Remove the file myfile.txt. You will not be prompted, even if the file is
  write-protected; if rm can delete the file, it will.

    $ rm -f myfile.txt

  Remove all files in the working directory. If it is write-protected, you will
  be prompted before rm removes it.

    $ rm *

  Remove all files in the working directory. rm will not prompt you for any
  reason before deleting them.

    $ rm -f *

  Attempt to remove every file in the working directory, but prompt before each
  file to confirm.

    $ rm -i *


  Remove every file in the working directory; prompt for confirmation if more
  than three files are being deleted.

    $ rm -I *

  Remove the directory mydirectory, and any files and directories it contains.
  If a file or directory that rm tries to delete is write-protected, you will be
  prompted to make sure that you really want to delete it.

    $ rm -r mydirectory

  Same as the above command, but you will never be prompted; if rm can delete
  the files, it will.

    $ rm -rf mydirectory

EOF

exit 0

#!/usr/bin/env bash

# some formatting variables
bold="\033[1m"
underline="\033[4m"
normal="\033[0m"
# to use this formatting use 'echo -e'
# start formatting sequence with ${bold} or ${underline}
# and end it with ${normal}

# The command's name
echo -e "\n${bold}COMMAND NAME:${normal}"
echo -e "\n\t${bold}git rebase${normal}"

echo -e "\n------------"

# the command's description
echo -e "\n${bold}COMMAND DESCRIPTION:${normal}"


echo -e "\n\tgit rebase is a another command for two branches to merge.For instance,"
echo -e "\tuser is on the new branch, git rebase will get the diff introduced by each commit of"
echo -e "\tthis branch and save those diffs to temporary files, then reset the current branch"
echo -e "\tto the same commit as the branch user is rebashing on. git rebase command actually takes the"
echo -e "\tchange from new branch and reapply it on the branch user want to merge. "

 echo -e "\n------------"

 # the command's syntax
echo -e "\nCOMMAND SYNTAX:"
echo -e "\n\tgit rebase [options]"
echo -e "\t\t-i: Interactive rebasing, with which you have an ability to alter commits \n\t\t as they are moved to the new branch, mostly used for cleaning a messy history \n\t\t before merging a feature branch into master."
echo -e "\t\t--abort: Will leave you where you were before attempting the rebase."

echo -e "\n------------"

#!/usr/bin/env bash

cat<<EOF

Name:
  git-status - Show the working tree status

------------------------------------------------------------------------------

Description:
  Displays paths that have differences between the index file and the current
  HEAD commit, paths that have differences between the working tree and the
  index file, and paths in the working tree that are not tracked by Git (and are
  not ignored by gitignore[5]). The first are what you would commit by running
  git commit; the second and third are what you could commit by running git add
  before running git commit.

------------------------------------------------------------------------------

Syntax:
  git status [<options>...] [--] [<pathspec>...]

------------------------------------------------------------------------------

Options:
  -s
  --short
    Give the output in the short-format.

  -b
  --branch
    Show the branch and tracking info even in short-format.

  --porcelain
    Give the output in an easy-to-parse format for scripts. This is similar to
    the short output, but will remain stable across Git versions and regardless
    of user configuration. See below for details.

  --long
    Give the output in the long-format. This is the default.

  -v
  --verbose
    In addition to the names of files that have been changed, also show the
    textual changes that are staged to be committed (i.e., like the output of
    git diff --cached). If -v is specified twice, then also show the changes in
    the working tree that have not yet been staged (i.e., like the output of git
    diff).

  -u[<mode>]
  --untracked-files[=<mode>]
    Show untracked files.

    The mode parameter is used to specify the handling of untracked files. It is
    optional: it defaults to all, and if specified, it must be stuck to the
    option (e.g. -uno, but not -u no).

    The possible options are:

    + no - Show no untracked files.

    + normal - Shows untracked files and directories.

    + all - Also shows individual files in untracked directories.

    When -u option is not used, untracked files and directories are shown (i.e.
    the same as specifying normal), to help you avoid forgetting to add newly
    created files. Because it takes extra work to find untracked files in the
    filesystem, this mode may take some time in a large working tree. Consider
    enabling untracked cache and split index if supported (see git update-index
    --untracked-cache and git update-index --split-index), Otherwise you can use
    no to have git status return more quickly without showing untracked files.

    The default can be changed using the status.showUntrackedFiles configuration
    variable documented in git-config[1].

  --ignore-submodules[=<when>]
    Ignore changes to submodules when looking for changes. <when> can be either
    "none", "untracked", "dirty" or "all", which is the default. Using "none"
    will consider the submodule modified when it either contains untracked or
    modified files or its HEAD differs from the commit recorded in the
    superproject and can be used to override any settings of the ignore option
    in git-config[1] or gitmodules[5]. When "untracked" is used submodules are
    not considered dirty when they only contain untracked content (but they are
    still scanned for modified content). Using "dirty" ignores all changes to
    the work tree of submodules, only changes to the commits stored in the
    superproject are shown (this was the behavior before 1.7.0). Using "all"
    hides all changes to submodules (and suppresses the output of submodule
    summaries when the config option status.submoduleSummary is set).

  --ignored
    Show ignored files as well.

  -z
    Terminate entries with NUL, instead of LF. This implies the --porcelain
    output format if no other format is given.

  --column[=<options>]
  --no-column
    Display untracked files in columns. See configuration variable column.status
    for option syntax.--column and --no-column without options are equivalent to
    always and never respectively.

EOF

exit 0
